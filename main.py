import logging
import asyncio
from colorama import init, Fore, Style
from aiogram.enums import ParseMode

from config import Config
from app.database.database import create_all_tables
from app.servise import subscribes_service
from app.bot import bot, dp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Ä–æ—É—Ç–µ—Ä —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
from app.user.handlers import r as user_r
from app.servise.task_handlers import router as task_r
from app.admin.handlers import router as admin_router  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä–∞
from app.servise.broadcast import router as broadcast_router
from app.servise.subscribes_service import r as subscribes_r
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init()

class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def format(self, record):
        if record.levelno == logging.INFO:
            record.msg = f"{Fore.GREEN}{record.msg}{Style.RESET_ALL}"
        elif record.levelno == logging.WARNING:
            record.msg = f"{Fore.YELLOW}{record.msg}{Style.RESET_ALL}"
        elif record.levelno == logging.ERROR:
            record.msg = f"{Fore.RED}{record.msg}{Style.RESET_ALL}"
        return super().format(record)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger('bot')
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º handler –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(ColoredFormatter('%(message)s'))
logger.addHandler(console_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç aiogram
logging.getLogger('aiogram').setLevel(logging.WARNING)
logging.getLogger('aiogram.event').setLevel(logging.WARNING)

async def notify_admins():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    message = (
        "üöÄ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        "üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> <code>gidddra</code>\n"
        "‚ú® <b>–°—Ç–∞—Ç—É—Å:</b> <code>–ê–∫—Ç–∏–≤–µ–Ω</code>"
    )
    for admin_id in Config.ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def main():
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞
    logger.info(f"\n{Fore.CYAN}{'~' * 50}")
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"{Fore.YELLOW}üë®‚Äçüíª Tg Developer: {Fore.MAGENTA}gidddra{Style.RESET_ALL}")
    logger.info(f"{Fore.CYAN}{'~' * 50}\n")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫
        await subscribes_service.start()
        logger.info("–°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω")

        #–ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(user_r)
        dp.include_router(task_r)
        dp.include_router(admin_router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä
        dp.include_router(broadcast_router)
        dp.include_router(subscribes_r)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        dp.chat_join_request.register(subscribes_service.on_chat_member_update)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await create_all_tables()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
        await notify_admins()
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥...")
        await dp.start_polling(bot)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")