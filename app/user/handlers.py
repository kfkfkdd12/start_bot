from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.types.input_file import FSInputFile
from pathlib import Path
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

import app.database.db_queries as qu
from . import user_kb as kb
from app.bot import bot
from .user_kb import main, promo_cancel, help_kb
from config import Config
from app.servise.subscribes_service import subscribes_service
from .middleware import AdPostMiddleware

logger = logging.getLogger(__name__)

r = Router()
# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
r.message.middleware(AdPostMiddleware())

class PromoCode(StatesGroup):
    waiting_for_code = State()

@r.message(CommandStart())
async def start(mes: Message, command: CommandStart):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await qu.register_user(mes.from_user.id, mes.from_user.username, command.args)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    channels = await qu.get_active_sponsor_channels()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not channels:
        await mes.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarsBot! üåü\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=kb.main
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    text = (
   """
<b>‚≠êÔ∏è–ü–û–õ–£–ß–ê–ô –ó–í–ï–ó–î–´ –ë–ï–°–ü–õ–ê–¢–ù–û‚≠êÔ∏è</b>

<b>–ü–æ–ª—É—á–∞–π 3 –∑–≤–µ–∑–¥—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –∏ –∑–∞–¥–∞–Ω–∏—è‚ö°Ô∏è</b>

<b><u>–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞:</u></b>
<blockquote>1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ãüëá (—ç—Ç–æ –∑–∞–π–º–µ—Ç 5 —Å–µ–∫—É–Ω–¥).
2Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è‚úÖ¬ª</blockquote>
   """
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤
    keyboard = []
    for channel in channels:
        # –ï—Å–ª–∏ channel_id == 0, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if channel.channel_id == 0:
            keyboard.append([InlineKeyboardButton(
                text=channel.button_name or channel.name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º button_name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ name
                url=channel.url
            )])
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            is_subscribed = await subscribes_service.is_user_subscribed(mes.from_user.id, channel.channel_id)
            if not is_subscribed:
                keyboard.append([InlineKeyboardButton(
                    text=channel.button_name or channel.name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º button_name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ name
                    url=channel.url
                )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    if keyboard:
        keyboard.append([InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="check_subscriptions"
        )])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏, —É–±–∏—Ä–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        photo_path = Path(__file__).parent.parent / "picture" / "start.jpg"
        await mes.answer_photo(
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        # –£–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await mes.answer(
            "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        await mes.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=kb.main
        )

@r.callback_query(F.data == "check_subscriptions")
async def check_subscriptions(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    channels = await qu.get_active_sponsor_channels()
    not_subscribed = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    for channel in channels:
        is_subscribed = await subscribes_service.is_user_subscribed(callback.from_user.id, channel.channel_id)
        if not is_subscribed:
            not_subscribed.append(channel)
    
    if not_subscribed:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
        keyboard = []
        for channel in not_subscribed:
            keyboard.append([InlineKeyboardButton(
                text=channel.button_name or channel.name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º button_name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ name
                url=channel.url
            )])
        keyboard.append([InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="check_subscriptions"
        )])
        
        await callback.answer(
            "‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
            show_alert=True
        )
        await callback.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.delete()
        await qu.update_user_op_status(callback.from_user.id, True)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        await callback.message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=kb.main
        )

@r.message(F.text == "üåü –ü–æ–ª—É—á–∏—Ç—å –∑–≤–µ–∑–¥—ã")
async def get_stars(mes: Message):
    bot_info = await bot.get_me()
    invite_count = await qu.get_invite_count(mes.from_user.id)
    invite_link = f"https://t.me/{bot_info.username}?start={mes.from_user.id}"
    reward = await qu.get_current_referral_reward()
    text = (
        f"+ {reward} ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üî•\n\n"
        "üë´ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –¥—Ä—É–∑–µ–π, –∞ —Ç–∞–∫–∂–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö!\n\n"
        f"üîó –í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite_link}\n\n"
        f"üèÉ‚Äç‚ôÄÔ∏è –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {invite_count}"
    )
    photo_path = Path(__file__).parent.parent / "picture" / "job_stars.jpg"
    share_keyboard = await kb.get_share_keyboard(mes.from_user.id)
    await mes.answer_photo(
        photo=FSInputFile(photo_path),
        caption=text,
        reply_markup=share_keyboard
    )
        

@r.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(mes: Message):
    user = await qu.get_user(mes.from_user.id)
    text =(f"‚≠ê –í–∞—à ID - {mes.from_user.id}\n"
        f"üë´ TG: @{mes.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n"
        f"üíµ –î–µ–ø–æ–∑–∏—Ç ‚Äî {user.deposit:.2f} ‚≠ê\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å ‚Äî {user.balans:.2f} ‚≠ê\n")
    photo_path = Path(__file__).parent.parent / "picture" / "profile.jpg"
    await mes.answer_photo(
        photo=FSInputFile(photo_path),
        caption=text,
        reply_markup=kb.profile
    )


@r.message(F.text == "üóí –û—Ç–∑—ã–≤—ã")
async def reviews(mes: Message):
    text = "üìù –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: "
    photo_path = Path(__file__).parent.parent / "picture" / "reviews.jpg"
    await mes.answer_photo(
        photo=FSInputFile(photo_path),
        caption=text,
        reply_markup=kb.reviews
    )

@r.message(F.text == "üèÖ –ü—Ä–æ–º–æ–∫–æ–¥")
async def promo_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–º–æ–∫–æ–¥"""
    photo_path = Path(__file__).parent.parent / "picture" / "promo.jpg"
    await message.answer_photo(
        photo=FSInputFile(photo_path),
        caption="üèÜ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=kb.promo_cancel
    )
    await state.set_state(PromoCode.waiting_for_code)

@r.callback_query   (PromoCode.waiting_for_code, F.data == "cancel_promo")
async def cancel_promo(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await callback_query.message.delete()
    await state.clear()


@r.message(PromoCode.waiting_for_code)
async def process_promo_code(mes: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    promo_code = mes.text.strip().upper()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±–∞–∑—ã
    promo = await qu.get_promo_code( promo_code)
        
    if not promo:
            await mes.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                reply_markup=main
            )
            await state.clear()
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
    success = await qu.activate_promo_code(mes.from_user.id, promo)
        
    if success:
            await mes.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {promo.reward} ‚≠ê\n"
                f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
                reply_markup=main
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ—É–¥–∞—á–∏
        if await qu.check_promo_activation(mes.from_user.id, promo.id):
                await mes.answer(
                    "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥",
                    reply_markup=main
                )
        else:
                await mes.answer(
                    "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π)",
                    reply_markup=main
                )
    
    await state.clear()


@r.message(F.text == "üí≥ –í—ã–≤–µ—Å—Ç–∏")
async def withdraw(mes: Message):
    text = "–î–ª—è –≤—ã–≤–æ–¥–∞ ‚≠êÔ∏è Stars –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:üëá"
    photo_path = Path(__file__).parent.parent / "picture" / "withdraw.jpg"
    await mes.answer_photo(
        photo=FSInputFile(photo_path),
        caption=text,
        reply_markup=kb.withdraw
    )


@r.callback_query(F.data == "withdraw")
async def withdraw_callback(callback_query: CallbackQuery):
    user = await qu.get_user(callback_query.from_user.id)
    await callback_query.message.delete()
    if user.balans < 15:
        await callback_query.message.answer("‚úçÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 15 ‚≠êÔ∏è\n\n<b>‚ùóÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ë–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞!</b>\n\nüè∑Ô∏è –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ 15 –°—Ç–∞—Ä—Å –∏ —Å–º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏")
    else:
        await callback_query.message.answer("<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∏–∂–µüëá</i>", reply_markup=kb.withdraw_gift)

@r.callback_query   (F.data == "cancel_withdraw")
async def cancel_promo(callback_query: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await callback_query.message.delete()

@r.callback_query(F.data.startswith("gift_"))
async def process_gift_withdrawal(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ callback_data
        gift_id = int(callback_query.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞
        gift_price = kb.GIFT_PRICES.get(gift_id)
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        user = await qu.get_user(callback_query.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.balans < gift_price:
            await callback_query.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥!\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balans} ‚≠ê\n"
                f"üí´ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞: {gift_price} ‚≠ê",
                show_alert=True
            )
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞
        success, new_balance = await qu.process_gift_withdrawal(callback_query.from_user.id, gift_price)
        
        if not success:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.edit_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–≤–æ–¥!\n\n"
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
            f"üí´ –°–ø–∏—Å–∞–Ω–æ: {gift_price} ‚≠ê\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {new_balance} ‚≠ê"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
        await notify_admin_about_withdraw(user, gift_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞", show_alert=True)

@r.message(F.text == "üìï –ü–æ–º–æ—â—å")
async def help_command(mes: Message):
    help_text = (
        "üìå –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è StarsBot:\n\n"
        "–ü—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤: —Ä–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! ü§ë\n\n"
        "–ü–æ—á–µ–º—É –∂–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞? üòï\n"
        "–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è:\n\n"
        "1Ô∏è‚É£ –î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º –æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –Ω–∞—à–µ–π —Å—Å—ã–ª–∫–∏! üì± –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π –ª—é–¥–µ–π —Å —á–∞—Ç–æ–≤ –∏–ª–∏ —Å–≤–æ–µ–≥–æ —Ç–≥-–∫–∞–Ω–∞–ª–∞.\n"
        "2Ô∏è‚É£ –ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–æ–ª–∏–∫–∏ –≤ —Ç–∏–∫-—Ç–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–æ–¥ —Ç–∏–∫-—Ç–æ–∫–∞–º–∏ —Å —Å—Ö–æ–∂–µ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π! üìπ\n\n"
        "–ü–æ—á–µ–º—É –Ω–µ –∑–∞—á–∏—Å–ª–∏–ª–∞—Å—å —Å—É–º–º–∞ —Å –º–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞? üòï\n"
        "‚ùì –ï—Å–ª–∏ –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥, –∞ –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å —Å–æ —Å—á–µ—Ç–∞, –Ω–æ –Ω–µ –∑–∞—á–∏—Å–ª–∏–ª–∏—Å—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, —Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ü§î\n\n"
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üòä\n"
        "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–º, —á—Ç–æ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç, –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤–∞–º –≤ –≤–∏–¥–µ –ø–æ–¥–∞—Ä–∫–∞! üéÅ –ü–æ–∫–∞ —ç—Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞. üïíÔ∏è\n\n"
        "‚òÄÔ∏è –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞—á–∏! ü§ó"
    )
    await mes.answer(help_text, reply_markup=help_kb)

@r.callback_query(F.data == "withdraw_time")
async def withdraw_time_info(callback_query: CallbackQuery):
    await callback_query.answer(
        "üìù –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –≤—ã–≤–µ–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ü§ñ\n\n"
        "‚è∞ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –ø–∞—Ä—ã —á–∞—Å–æ–≤ –¥–æ 2 –¥–Ω–µ–π.\n\n"
        "üï∞ –û–±—ã—á–Ω–æ –∂–µ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫.",
        show_alert=True
    )

@r.callback_query(F.data == "friend_not_counted")
async def friend_not_counted_info(callback_query: CallbackQuery):
    await callback_query.answer(
        "ü§ñ –ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "‚úçÔ∏è –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –±–æ–Ω—É—Å –∑–∞ –¥—Ä—É–≥–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!",
        show_alert=True
    )

async def notify_admin_about_withdraw(user, gift_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –≤—ã–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è GIFT_PRICES
    gift_emoji = {
        5170233102089322756: "üß∏",  # üß∏
        5170145012310081615: "üíù",  # üíù
        5168103777563050263: "üåπ",  # üåπ
        5170250947678437525: "üéÅ",  # üéÅ
        6028601630662853006: "üçæ",  # üçæ
        5170564780938756245: "üöÄ",  # üöÄ
        5170314324215857265: "üíê",  # üíê
        5170144170496491616: "üéÇ",  # üéÇ
        5168043875654172773: "üèÜ",  # üèÜ
        5170690322832818290: "üíç",  # üíç
    }.get(gift_id, "üéÅ")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º üéÅ

    log_message = (
        f"üéÅ –ù–æ–≤—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_id}\n"
        f"üéØ ID –ø–æ–¥–∞—Ä–∫–∞: {gift_id}\n"
        f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {gift_emoji}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–≤—è–∑–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è
    contact_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                url=f"tg://user?id={user.user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                callback_data=f"accept_withdraw_{user.user_id}_{gift_id}"
            )
        ]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in Config.ADMIN_IDS:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
            await bot.send_sticker(
                admin_id,
                sticker=gift_id
            )
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                admin_id,
                log_message,
                reply_markup=contact_kb
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@r.callback_query(F.data.startswith("accept_withdraw_"))
async def process_withdraw_accept(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback.data.split("_")
    user_id = int(parts[2])  # –¢—Ä–µ—Ç—å–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    gift_id = parts[3]       # –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    new_text = (
        f"üéÅ –í—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üéØ ID –ø–æ–¥–∞—Ä–∫–∞: {gift_id}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {callback.from_user.username}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤—è–∑–∏
    contact_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
            url=f"tg://user?id={user_id}"
        )]
    ])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        new_text,
        reply_markup=contact_kb
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_notification = (
        "üéâ –í–∞—à –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç!\n\n"
        "‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ:\n"
        f"üëâ {Config.OTZIVI_URL}"
    )
    
    try:
        await bot.send_message(user_id, user_notification)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await callback.answer("–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
