from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, TelegramObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
from ..database import db_queries as qu

logger = logging.getLogger(__name__)

class AdPostMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç middleware
    MAIN_MENU_BUTTONS = {
        "üåü –ü–æ–ª—É—á–∏—Ç—å –∑–≤–µ–∑–¥—ã",
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        "üìö –ó–∞–¥–∞–Ω–∏—è",
        "üóí –û—Ç–∑—ã–≤—ã",
        "üèÖ –ü—Ä–æ–º–æ–∫–æ–¥",
        "üí≥ –í—ã–≤–µ—Å—Ç–∏",
        "üìï –ü–æ–º–æ—â—å"
    }
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
        if not isinstance(event, Message) or not event.text:
            return await handler(event, data)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if event.text not in self.MAIN_MENU_BUTTONS:
            return await handler(event, data)
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
        ad_post = await qu.get_random_ad_post()
        if not ad_post:
            return await handler(event, data)
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = None
        if ad_post.url:
            buttons = []
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–∞—Ä—ã "—Ç–µ–∫—Å—Ç - —Å—Å—ã–ª–∫–∞"
            button_pairs = [pair.strip() for pair in ad_post.url.split(',')]
            for pair in button_pairs:
                if ' - ' in pair:
                    text, url = pair.split(' - ', 1)
                    buttons.append([InlineKeyboardButton(text=text.strip(), url=url.strip())])
            if buttons:
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
        try:
            await event.answer(
                text=ad_post.text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return await handler(event, data) 