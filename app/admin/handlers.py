from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import Config
import logging
import app.database.db_queries as qu
import random
import string
from app.bot import bot
import json

from . import admin_kb as kb

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
router = Router()

class PromoCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    waiting_for_code = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    waiting_for_reward = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã
    waiting_for_activations = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π

class ReferralLinkCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è

class OPChannelCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–ü –∫–∞–Ω–∞–ª–∞"""
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    waiting_for_channel_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞
    waiting_for_url = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ URL

class TaskChannelCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    waiting_for_channel_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞
    waiting_for_url = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ URL
    waiting_for_limit = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
    waiting_for_reward = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã

class ReferralRewardChange(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    waiting_for_reward = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã

class AdPostCreation(StatesGroup):
    waiting_for_name = State()
    waiting_for_content = State()
    waiting_for_buttons = State()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    if message.from_user.id not in Config.ADMIN_IDS:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.admin_main
    )
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_stats = await qu.get_users_stats()
        ad_stats = await qu.get_ad_posts_stats()
        promo_stats = await qu.get_promo_stats()
        channels_stats = await qu.get_channels_stats()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            
            "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚îú –í—Å–µ–≥–æ: {users_stats['total_users']}\n"
            f"‚îú –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {users_stats['new_users']['day']}\n"
            f"‚îú –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users_stats['new_users']['week']}\n"
            f"‚îî –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {users_stats['new_users']['month']}\n\n"
            
            "üì¢ <b>–†–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n"
            f"‚îú –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {ad_stats['total_posts']}\n"
            f"‚îî –ü–æ–∫–∞–∑–æ–≤ –≤—Å–µ–≥–æ: {ad_stats['shows']['total']}\n\n"
            
            "üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
            f"‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {promo_stats['active_promos']}\n"
            f"‚îú –ê–∫—Ç–∏–≤–∞—Ü–∏–π –≤—Å–µ–≥–æ: {promo_stats['activations']['total']}\n"
            f"‚îú –ê–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å: {promo_stats['activations']['day']}\n"
            f"‚îú –ê–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {promo_stats['activations']['week']}\n"
            f"‚îî –ê–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: {promo_stats['activations']['month']}\n\n"
            
            "üìà <b>–ó–∞–¥–∞–Ω–∏—è:</b>\n"
            f"‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ–≥–æ: {channels_stats['completed_tasks']['total']}\n"
            f"‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –¥–µ–Ω—å: {channels_stats['completed_tasks']['today']}\n"
            f"‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {channels_stats['completed_tasks']['week']}\n"
            f"‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü: {channels_stats['completed_tasks']['month']}\n\n"
            
            "üèÜ <b>–¢–æ–ø –ø–æ—Å—Ç—ã –ø–æ –ø–æ–∫–∞–∑–∞–º:</b>\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ—Å—Ç—ã
        for i, post in enumerate(ad_stats['top_posts'], 1):
            stats_text += f"{i}. {post['name']}: {post['shows']} –ø–æ–∫–∞–∑–æ–≤\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        await callback.message.edit_text(
            stats_text,
            reply_markup=kb.admin_stats,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    await callback.message.edit_text(
        "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.admin_main
    )

@router.callback_query(F.data == "create_promo")
async def start_promo_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    
    await callback.message.edit_text(
        f"üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫–æ–¥: <code>{code}</code>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
        reply_markup=kb.promo_cancel,
        parse_mode="HTML"
    )
    await state.set_state(PromoCreation.waiting_for_code)
    await state.update_data(suggested_code=code)

@router.callback_query(F.data == "cancel_promo_creation", PromoCreation.waiting_for_code)
async def cancel_promo_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.admin_main
    )

@router.message(PromoCreation.waiting_for_code)
async def process_promo_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    if await qu.check_promo_code_exists(code):
        await message.answer(
            "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.promo_cancel
        )
        return

    await state.update_data(code=code)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:",
        reply_markup=kb.promo_cancel
    )
    await state.set_state(PromoCreation.waiting_for_reward)

@router.message(PromoCreation.waiting_for_reward)
async def process_promo_reward(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    try:
        reward = float(message.text.replace(',', '.'))
        if reward <= 0:
            raise ValueError("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5",
            reply_markup=kb.promo_cancel
        )
        return

    await state.update_data(reward=reward)
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:",
        reply_markup=kb.promo_cancel
    )
    await state.set_state(PromoCreation.waiting_for_activations)

@router.message(PromoCreation.waiting_for_activations)
async def process_promo_activations(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    try:
        activations = int(message.text)
        if activations <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!",
            reply_markup=kb.promo_cancel
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    data = await state.get_data()
    code = data['code']
    reward = data['reward']

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = await qu.create_promo_code(code, reward, activations)
    
    if not success:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.promo_cancel
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üéÅ –ö–æ–¥: <code>{code}</code>\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê\n"
        f"üî¢ –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}",
        reply_markup=kb.admin_main,
        parse_mode="HTML"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    logger.info(
        f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:\n"
        f"- –ö–æ–¥: {code}\n"
        f"- –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê\n"
        f"- –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n"
        f"- –°–æ–∑–¥–∞–ª: {message.from_user.id}"
    )

@router.callback_query(F.data == "create_ref_link")
async def start_ref_link_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    await callback.message.edit_text(
        "üîó <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ú–æ–π –∫–∞–Ω–∞–ª' –∏–ª–∏ '–†–µ–∫–ª–∞–º–∞ –≤ —á–∞—Ç–µ'\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
        reply_markup=kb.ref_link_cancel,
        parse_mode="HTML"
    )
    await state.set_state(ReferralLinkCreation.waiting_for_name)

@router.callback_query(F.data == "cancel_ref_link_creation", ReferralLinkCreation.waiting_for_name)
async def cancel_ref_link_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.admin_main
    )

@router.message(ReferralLinkCreation.waiting_for_name)
async def process_ref_link_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    name = message.text.strip()
    if len(name) > 255:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 255 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.ref_link_cancel
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    success, code, error = await qu.create_referral_link(name, message.from_user.id)
    
    if not success:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.ref_link_cancel
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_info = await bot.get_me()
    full_link = f"https://t.me/{bot_info.username}?start={code}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üîó –°—Å—ã–ª–∫–∞: <code>{full_link}</code>\n"
        f"üÜî –ö–æ–¥: <code>{code}</code>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
        reply_markup=kb.admin_main,
        parse_mode="HTML"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    logger.info(
        f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"- –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"- –ö–æ–¥: {code}\n"
        f"- –°–æ–∑–¥–∞–ª: {message.from_user.id}"
    )

@router.callback_query(F.data == "show_ref_links")
async def show_ref_links(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Å—ã–ª–æ–∫
    links, total_pages = await qu.get_admin_ref_links(callback.from_user.id, page=0)
    
    if not links:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É'",
            reply_markup=kb.admin_main
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üìã <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Å—Å—ã–ª–æ–∫
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_ref_links_keyboard(links, page=0, total_pages=total_pages),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("ref_links_page_"))
async def handle_ref_links_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    links, total_pages = await qu.get_admin_ref_links(callback.from_user.id, page=page)
    
    if not links:
        await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await callback.message.edit_text(
        "üìã <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n\n",
        reply_markup=kb.get_ref_links_keyboard(links, page=page, total_pages=total_pages),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("ref_link_"))
async def handle_ref_link_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Å—ã–ª–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    parts = callback.data.split("_")
    if len(parts) == 3 and parts[2] == "deactivate":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
        link_id = int(parts[3])
        success = await qu.toggle_ref_link_status(link_id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ
            link = await qu.get_ref_link_details(link_id)
            if link:
                status = "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if not link['is_active'] else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                await callback.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ {status}!", show_alert=True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ
                await show_ref_link_details(callback, link)
            else:
                await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Å—ã–ª–∫–∏", show_alert=True)
    else:
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å—Å—ã–ª–∫–∏
        link_id = int(parts[2])
        link = await qu.get_ref_link_details(link_id)
        
        if link:
            await show_ref_link_details(callback, link)
        else:
            await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

async def show_ref_link_details(callback: CallbackQuery, link: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_info = await bot.get_me()
    full_link = f"https://t.me/{bot_info.username}?start={link['code']}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    created_at = link['created_at'].strftime("%d.%m.%Y %H:%M")
    last_used = link['last_used_at'].strftime("%d.%m.%Y %H:%M") if link['last_used_at'] else "–ù–∏–∫–æ–≥–¥–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await qu.get_referral_stats(link['code'])
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    op_percentage = (stats['completed_op'] / link['uses_count'] * 100) if link['uses_count'] > 0 else 0
    completed_tasks_percentage = (stats['tasks']['completed'] / stats['tasks']['started'] * 100) if stats['tasks']['started'] > 0 else 0
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    op_percentage_str = f"{op_percentage:.1f}%"
    completed_tasks_percentage_str = f"{completed_tasks_percentage:.1f}%"
    
    text = (
        f"üîó <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ</b>\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {link['name']}\n"
        f"üÜî –ö–æ–¥: <code>{link['code']}</code>\n"
        f"üîó –°—Å—ã–ª–∫–∞: <code>{full_link}</code>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {link['uses_count']}\n"
        f"‚îú –ü—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å: {stats['completed_op']} ({op_percentage_str})\n"
        f"‚îú –ó–∞–¥–∞–Ω–∏—è:\n"
        f"‚îÇ   ‚îú –ù–∞—á–∞—Ç–æ: {stats['tasks']['started']}\n"
        f"‚îÇ   ‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['tasks']['completed']} ({completed_tasks_percentage_str})\n"
        f"‚îÇ   ‚îî –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['tasks']['in_progress']}\n"
        f"‚îú –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}\n"
        f"‚îú –°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
        f"‚îî –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if link['is_active'] else '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}\n\n"
        f"üë§ –°–æ–∑–¥–∞–ª: @{link['creator']['username'] if link['creator'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_ref_link_details_keyboard(link['id']),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "op_channels")
async def show_op_channels_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –û–ü –∫–∞–Ω–∞–ª–∞–º–∏"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    await callback.message.edit_text(
        "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–ü –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.op_channels_menu,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "op_channels_list")
async def show_op_channels_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –û–ü –∫–∞–Ω–∞–ª–æ–≤"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = await qu.get_all_op_channels()
    
    if not channels:
        await callback.message.edit_text(
            "üì¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –û–ü –∫–∞–Ω–∞–ª–æ–≤.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å'",
            reply_markup=kb.op_channels_menu
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    await callback.message.edit_text(
        "üì¢ <b>–°–ø–∏—Å–æ–∫ –û–ü –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb.get_op_channels_keyboard(channels),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "op_channel_add")
async def start_op_channel_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–ü –∫–∞–Ω–∞–ª–∞"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    await callback.message.edit_text(
        "üì¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–ü –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=kb.op_channel_cancel,
        parse_mode="HTML"
    )
    await state.set_state(OPChannelCreation.waiting_for_name)

@router.message(OPChannelCreation.waiting_for_name)
async def process_op_channel_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –û–ü –∫–∞–Ω–∞–ª–∞"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    name = message.text.strip()
    if len(name) > 255:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 255 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.op_channel_cancel
        )
        return

    await state.update_data(name=name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890):",
        reply_markup=kb.op_channel_cancel
    )
    await state.set_state(OPChannelCreation.waiting_for_channel_id)

@router.message(OPChannelCreation.waiting_for_channel_id)
async def process_op_channel_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –û–ü –∫–∞–Ω–∞–ª–∞"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    try:
        channel_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞!\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)",
            reply_markup=kb.op_channel_cancel
        )
        return

    await state.update_data(channel_id=channel_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ URL –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/channel):",
        reply_markup=kb.op_channel_cancel
    )
    await state.set_state(OPChannelCreation.waiting_for_url)

@router.message(OPChannelCreation.waiting_for_url)
async def process_op_channel_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ URL –û–ü –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    url = message.text.strip()
    if not url.startswith(("https://t.me/", "https://telegram.me/")):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∫–∞–Ω–∞–ª–∞!\n"
            "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/ –∏–ª–∏ https://telegram.me/",
            reply_markup=kb.op_channel_cancel
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ
    data = await state.get_data()
    name = data['name']
    channel_id = data['channel_id']

    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
    success, error = await qu.add_op_channel(name, channel_id, url)
    
    if not success:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.op_channel_cancel
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"‚úÖ –û–ü –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üÜî ID: {channel_id}\n"
        f"üîó URL: {url}",
        reply_markup=kb.op_channels_menu
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data.startswith("op_channel_"))
async def handle_op_channel_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –û–ü –∫–∞–Ω–∞–ª–æ–º"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    parts = callback.data.split("_")
    if len(parts) == 4 and parts[2] == "delete":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        channel_id = int(parts[3])
        success = await qu.delete_op_channel(channel_id)
        
        if success:
            await callback.answer("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            await show_op_channels_list(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞", show_alert=True)
    elif len(parts) == 4 and parts[2] == "toggle":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞
        channel_id = int(parts[3])
        success = await qu.toggle_op_channel_status(channel_id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = await qu.get_op_channel(channel_id)
            if channel:
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if channel['is_active'] else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await callback.answer(f"‚úÖ –ö–∞–Ω–∞–ª {status}!", show_alert=True)
                await show_op_channel_details(callback, channel)
            else:
                await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞", show_alert=True)
    else:
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–∞–Ω–∞–ª–∞
        channel_id = int(parts[2])
        channel = await qu.get_op_channel(channel_id)
        
        if channel:
            await show_op_channel_details(callback, channel)
        else:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

async def show_op_channel_details(callback: CallbackQuery, channel: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    text = (
        f"üì¢ –ö–∞–Ω–∞–ª: {channel['name']}\n"
        f"üÜî ID –∫–∞–Ω–∞–ª–∞: {channel['channel_id']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {channel['url']}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_op_channel_details_keyboard(channel['id'])
    )

@router.callback_query(F.data == "task_channels")
async def show_task_channels_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    await callback.message.edit_text(
        "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.task_channels_menu,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "task_channels_list")
async def show_task_channels_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = await qu.get_all_task_channels()
    
    if not channels:
        await callback.message.edit_text(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å'",
            reply_markup=kb.task_channels_menu
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    await callback.message.edit_text(
        "üìù <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb.get_task_channels_keyboard(channels),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "task_channel_add")
async def start_task_channel_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=kb.task_channel_cancel,
        parse_mode="HTML"
    )
    await state.set_state(TaskChannelCreation.waiting_for_name)

@router.message(TaskChannelCreation.waiting_for_name)
async def process_task_channel_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    name = message.text.strip()
    if len(name) > 255:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 255 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.task_channel_cancel
        )
        return

    await state.update_data(name=name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890):",
        reply_markup=kb.task_channel_cancel
    )
    await state.set_state(TaskChannelCreation.waiting_for_channel_id)

@router.message(TaskChannelCreation.waiting_for_channel_id)
async def process_task_channel_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    try:
        channel_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞!\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)",
            reply_markup=kb.task_channel_cancel
        )
        return

    await state.update_data(channel_id=channel_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ URL –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/channel):",
        reply_markup=kb.task_channel_cancel
    )
    await state.set_state(TaskChannelCreation.waiting_for_url)

@router.message(TaskChannelCreation.waiting_for_url)
async def process_task_channel_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ URL –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    url = message.text.strip()
    if not url.startswith(("https://t.me/", "https://telegram.me/")):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∫–∞–Ω–∞–ª–∞!\n"
            "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/ –∏–ª–∏ https://telegram.me/",
            reply_markup=kb.task_channel_cancel
        )
        return

    await state.update_data(url=url)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):",
        reply_markup=kb.task_channel_cancel
    )
    await state.set_state(TaskChannelCreation.waiting_for_limit)

@router.message(TaskChannelCreation.waiting_for_limit)
async def process_task_channel_limit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    try:
        limit = int(message.text.strip())
        if limit <= 0:
            raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n"
            "–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º",
            reply_markup=kb.task_channel_cancel
        )
        return

    await state.update_data(limit=limit)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
        reply_markup=kb.task_channel_cancel
    )
    await state.set_state(TaskChannelCreation.waiting_for_reward)

@router.message(TaskChannelCreation.waiting_for_reward)
async def process_task_channel_reward(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    try:
        reward = float(message.text.replace(',', '.'))
        if reward <= 0:
            raise ValueError("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5",
            reply_markup=kb.task_channel_cancel
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ
    data = await state.get_data()
    name = data['name']
    channel_id = data['channel_id']
    url = data['url']
    limit = data['limit']

    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
    success, error = await qu.add_task_channel(name, channel_id, url, limit, reward)
    
    if not success:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.task_channel_cancel
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üÜî ID: {channel_id}\n"
        f"üîó URL: {url}\n"
        f"üìä –õ–∏–º–∏—Ç: {limit}\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê",
        reply_markup=kb.task_channels_menu
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data.startswith("task_channel_"))
async def handle_task_channel_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–æ–º –∑–∞–¥–∞–Ω–∏–π"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    parts = callback.data.split("_")
    if len(parts) == 4 and parts[2] == "delete":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        channel_id = int(parts[3])
        success = await qu.delete_task_channel(channel_id)
        
        if success:
            await callback.answer("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            await show_task_channels_list(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞", show_alert=True)
    elif len(parts) == 4 and parts[2] == "toggle":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞
        channel_id = int(parts[3])
        success = await qu.toggle_task_channel_status(channel_id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = await qu.get_task_channel(channel_id)
            if channel:
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if channel['is_active'] else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await callback.answer(f"‚úÖ –ö–∞–Ω–∞–ª {status}!", show_alert=True)
                await show_task_channel_details(callback, channel)
            else:
                await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞", show_alert=True)
    else:
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–∞–Ω–∞–ª–∞
        channel_id = int(parts[2])
        channel = await qu.get_task_channel(channel_id)
        
        if channel:
            await show_task_channel_details(callback, channel)
        else:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

async def show_task_channel_details(callback: CallbackQuery, channel: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∑–∞–¥–∞–Ω–∏–π"""
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    text = (
        f"üìù –ö–∞–Ω–∞–ª: {channel['name']}\n"
        f"üÜî ID –∫–∞–Ω–∞–ª–∞: {channel['channel_id']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {channel['url']}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üë• –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {channel['total_limit']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {channel['completed_count']}\n"
        f"üìà –û—Å—Ç–∞–ª–æ—Å—å: {channel['current_limit']}\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {channel['reward']} ‚≠ê"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_task_channel_details_keyboard(channel['id'])
    )

@router.callback_query(F.data == "cancel_task_channel_creation", TaskChannelCreation)
async def cancel_task_channel_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
    await state.clear()
    await callback.message.edit_text(
        "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.task_channels_menu,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "change_referral_reward")
async def start_referral_reward_change(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä–∞–¥—É
    current_reward = await qu.get_current_referral_reward()

    await callback.message.edit_text(
        f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {current_reward} ‚≠ê\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5):",
        reply_markup=kb.referral_reward_cancel,
        parse_mode="HTML"
    )
    await state.set_state(ReferralRewardChange.waiting_for_reward)

@router.callback_query(F.data == "cancel_referral_reward_change", ReferralRewardChange.waiting_for_reward)
async def cancel_referral_reward_change(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.admin_main
    )

@router.message(ReferralRewardChange.waiting_for_reward)
async def process_referral_reward(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return

    try:
        new_reward = float(message.text.replace(',', '.'))
        if new_reward <= 0:
            raise ValueError("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5",
            reply_markup=kb.referral_reward_cancel
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    success = await qu.update_referral_reward(new_reward)
    
    if success:
        await message.answer(
            f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
            f"üí∞ –ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {new_reward} ‚≠ê",
            reply_markup=kb.admin_main
        )
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {new_reward} ‚≠ê (–∏–∑–º–µ–Ω–∏–ª: {message.from_user.id})")
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=kb.referral_reward_cancel
        )

    await state.clear()

@router.callback_query(F.data == "ad_posts")
async def show_ad_posts_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏"""
    await callback.message.edit_text(
        "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=kb.ad_posts_menu
    )

@router.callback_query(F.data == "ad_posts_list")
async def show_ad_posts_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    posts = await qu.get_all_ad_posts()
    if not posts:
        await callback.message.edit_text(
            "üì¢ –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª",
            reply_markup=kb.ad_posts_menu
        )
        return
        
    await callback.message.edit_text(
        "üì¢ –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb.get_ad_posts_keyboard(posts)
    )

@router.callback_query(F.data == "ad_post_add")
async def start_ad_post_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:",
        reply_markup=kb.ad_post_cancel
    )
    await state.set_state(AdPostCreation.waiting_for_name)

@router.callback_query(F.data == "cancel_ad_post_creation")
async def cancel_ad_post_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.ad_posts_menu
    )

@router.message(AdPostCreation.waiting_for_name)
async def process_ad_post_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await state.update_data(name=message.text)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏:\n"
        "- <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
        "- <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "- <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n"
        "- <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>\n"
        "- <a href='—Å—Å—ã–ª–∫–∞'>—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏</a>",
        reply_markup=kb.ad_post_cancel
    )
    await state.set_state(AdPostCreation.waiting_for_content)

@router.message(AdPostCreation.waiting_for_content)
async def process_ad_post_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(text=message.html_text)
    
    await message.answer(
        "üîó –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Å—Å—ã–ª–∫–∞, —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Å—Å—ã–ª–∫–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–ù–∞—à –∫–∞–Ω–∞–ª - https://t.me/channel, –°–∞–π—Ç - https://site.com\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–Ω–µ—Ç¬ª –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã",
        reply_markup=kb.ad_post_cancel
    )
    await state.set_state(AdPostCreation.waiting_for_buttons)

@router.message(AdPostCreation.waiting_for_buttons)
async def process_ad_post_buttons(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    buttons = None
    
    if message.text.lower() != "–Ω–µ—Ç":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫
            button_pairs = [pair.strip() for pair in message.text.split(",")]
            for pair in button_pairs:
                if " - " not in pair:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            buttons = message.text.strip()
            
        except Exception as e:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Å—Å—ã–ª–∫–∞, —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Å—Å—ã–ª–∫–∞",
                reply_markup=kb.ad_post_cancel
            )
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É
    success, error = await qu.add_ad_post(
        name=data['name'],
        text=data['text'],
        url=buttons  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    )
    
    if success:
        await message.answer(
            "‚úÖ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=kb.ad_posts_menu
        )
    else:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {error}",
            reply_markup=kb.ad_posts_menu
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("ad_post_"))
async def handle_ad_post_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∫–ª–∞–º–Ω—ã–º –ø–æ—Å—Ç–æ–º"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # Parse the callback data
    parts = callback.data.split("_")
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    action = parts[2] if len(parts) > 3 else "view"
    post_id = int(parts[-1])

    if action == "delete":
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        post = await qu.get_ad_post(post_id)
        if not post:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç ¬´{post['name']}¬ª?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"_delete_{post_id}"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"ad_post_{post_id}")
                ]
            ])
        )
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
        post = await qu.get_ad_post(post_id)
        if post:
            await show_ad_post_details(callback, post)
        else:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@router.callback_query(F.data.startswith("_delete_"))
async def confirm_delete_ad_post(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    try:
        post_id = int(callback.data.split("_")[-1])
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
        success = await qu.delete_ad_post(post_id)
        
        if success:
            await callback.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ—Å—Ç–∞            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
            await show_ad_posts_list(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            await show_ad_posts_list(callback)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await show_ad_posts_list(callback)

async def show_ad_post_details(callback: CallbackQuery, post: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    text = (
        f"üìù <b>–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {post['name']}\n"
        f"üëÅ –ü–æ–∫–∞–∑–æ–≤: {post['show_count']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if post['created_at']:
        text += f"üìÖ –°–æ–∑–¥–∞–Ω: {post['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    text += f"üìÑ –¢–µ–∫—Å—Ç:\n{post['text']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if post['url']:
        text += f"\nüîó –ö–Ω–æ–ø–∫–∏:\n{post['url']}"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_ad_post_details_keyboard(post['id']),
        parse_mode="HTML"
    )
