import logging
from aiogram import Bot, types, F
import asyncio
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from config import Config
import app.database.db_queries as qu
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
def get_cancel_broadcast_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast_preview")]
    ])

def get_confirm_broadcast_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast_preview")
        ]
    ])

def get_cancel_broadcast_progress_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_broadcast_progress")]
    ])

class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_confirmation = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_in_progress = False
broadcast_cancelled = False
broadcast_stats = {
    'total': 0,
    'success': 0,
    'failed': 0,
    'start_time': None,
    'end_time': None
}
broadcast_message = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

@router.callback_query(F.data == "broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    if broadcast_in_progress:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", show_alert=True)
        return
    
    await state.set_state(BroadcastStates.waiting_for_message)
    await callback.message.edit_text(
        "üì¢ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
        "‚Ä¢ –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.",
        reply_markup=get_cancel_broadcast_keyboard(),
        parse_mode="HTML"
    )

@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    global broadcast_message
    
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_message = message
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if message.photo:
        await message.answer_photo(
            message.photo[-1].file_id,
            caption=message.html_text if message.caption_entities else message.caption,
            reply_markup=message.reply_markup,
            parse_mode="HTML" if message.caption_entities else None
        )
    else:
        await message.answer(
            message.html_text if message.entities else message.text,
            reply_markup=message.reply_markup,
            parse_mode="HTML" if message.entities else None
        )
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    preview_text = "üì¢ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
    preview_text += "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n"
    preview_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:"
    
    await message.answer(
        preview_text,
        reply_markup=get_confirm_broadcast_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(BroadcastStates.waiting_for_confirmation)

@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    global broadcast_in_progress, broadcast_cancelled, broadcast_stats, broadcast_message
    
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    if not broadcast_message:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await qu.get_all_users()
    total_users = len(users)
    
    if total_users == 0:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    broadcast_stats = {
        'total': total_users,
        'success': 0,
        'failed': 0,
        'start_time': datetime.now(),
        'end_time': None
    }
    
    broadcast_in_progress = True
    broadcast_cancelled = False
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = await callback.message.answer(
        f"üìä <b>–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {get_progress_bar(0, total_users)}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: 0\n"
        f"‚ùå –û—à–∏–±–æ–∫: 0\n"
        f"‚è± –í—Ä–µ–º—è: 0 —Å–µ–∫",
        reply_markup=get_cancel_broadcast_progress_keyboard(),
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for i, user in enumerate(users, 1):
        if broadcast_cancelled:
            break
            
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if broadcast_message.photo:
                await bot.send_photo(
                    user.user_id,
                    broadcast_message.photo[-1].file_id,
                    caption=broadcast_message.html_text if broadcast_message.caption_entities else broadcast_message.caption,
                    parse_mode="HTML" if broadcast_message.caption_entities else None,
                    reply_markup=broadcast_message.reply_markup
                )
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
                parse_mode = "HTML" if broadcast_message.entities else None
                await bot.send_message(
                    user.user_id,
                    broadcast_message.html_text if broadcast_message.entities else broadcast_message.text,
                    parse_mode=parse_mode,
                    reply_markup=broadcast_message.reply_markup
                )
            broadcast_stats['success'] += 1
        except Exception as e:
            logger.error(f"Failed to send broadcast to user {user.user_id}: {e}")
            broadcast_stats['failed'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
        if i % 10 == 0 or i == total_users:
            elapsed_time = (datetime.now() - broadcast_stats['start_time']).total_seconds()
            await stats_message.edit_text(
                f"üìä <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</b>\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {get_progress_bar(i, total_users)}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {broadcast_stats['success']}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {broadcast_stats['failed']}\n"
                f"‚è± –í—Ä–µ–º—è: {int(elapsed_time)} —Å–µ–∫",
                reply_markup=get_cancel_broadcast_progress_keyboard(),
                parse_mode="HTML"
            )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(0.1)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    broadcast_in_progress = False
    broadcast_stats['end_time'] = datetime.now()
    total_time = (broadcast_stats['end_time'] - broadcast_stats['start_time']).total_seconds()
    
    if broadcast_cancelled:
        final_message = "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
    else:
        final_message = "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    
    await stats_message.edit_text(
        f"{final_message}\n\n"
        f"üìä <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {broadcast_stats['success']}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {broadcast_stats['failed']}\n"
        f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(total_time)} —Å–µ–∫\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {broadcast_stats['success'] / total_users * 100:.1f}%",
        reply_markup=None,
        parse_mode="HTML"
    )
    
    await state.clear()
    broadcast_message = None

@router.callback_query(F.data == "cancel_broadcast_preview")
async def cancel_broadcast_preview(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=None
    )
    await state.clear()
    broadcast_message = None

def get_progress_bar(current: int, total: int, width: int = 20) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    
    Args:
        current (int): –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total (int): –û–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        width (int): –®–∏—Ä–∏–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
    Returns:
        str: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    progress = int(width * current / total)
    bar = "‚ñà" * progress + "‚ñë" * (width - progress)
    percentage = current / total * 100
    return f"{bar} {percentage:.1f}%" 