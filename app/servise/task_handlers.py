from aiogram import types, Router, Bot, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.database.db_queries import (
    get_next_task, mark_task_completed, decrease_channel_limit, add_reward_to_user,
    get_user_task, add_user_task, get_channel_by_task_id
)
from aiogram.exceptions import TelegramBadRequest
from cachetools import TTLCache

router = Router()

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å TTL 5 –º–∏–Ω—É—Ç
join_requests_cache = TTLCache(maxsize=1000, ttl=300)

@router.chat_join_request()
async def handle_join_request(event: types.ChatJoinRequest, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫—ç—à."""
    channel_id = event.chat.id
    user_id = event.from_user.id
    join_requests_cache.setdefault(channel_id, set()).add(user_id)

@router.message(F.text == "üìö –ó–∞–¥–∞–Ω–∏—è")
async def give_task(mes: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ."""
    user_id = mes.from_user.id
    next_task = await get_next_task(user_id)
    if not next_task:
        await mes.answer("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_tasks
    user_task = await get_user_task(user_id, next_task.id)
    if not user_task:
        await add_user_task(user_id, next_task.id)

     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞
    action_text = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if next_task.sab else "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
    task_text = (
            f"üìå <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {action_text} –≤ –∫–∞–Ω–∞–ª <b>{next_task.chanel_name}</b>\n"
            f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {next_task.reward} ‚≠êÔ∏è\n\n"
            "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ."
        )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", url=next_task.link)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_task:{next_task.id}")]
        ])
    await mes.answer(task_text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("check_task:"))
async def check_subscription(callback_query: types.CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
    task_id = int(callback_query.data.split(":")[1])
    user_id = callback_query.from_user.id
    try:
        chanel = await get_channel_by_task_id(task_id)
        if not chanel:
            await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return

        if chanel.sab:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await handle_subscription_check(bot, callback_query, chanel, user_id, task_id)
        else:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            await handle_join_request_check(bot, callback_query, chanel, user_id, task_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        next_task = await get_next_task(user_id)
        if next_task:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ user_tasks
            user_task = await get_user_task(user_id, next_task.id)
            if not user_task:
                await add_user_task(user_id, next_task.id)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞
                action_text = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if next_task.sab else "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
                task_text = (
                    f"üìå <b>–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {action_text} –≤ –∫–∞–Ω–∞–ª <b>{next_task.chanel_name}</b>\n"
                    f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {next_task.reward} üíé\n\n"
                    "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ."
                )
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", url=next_task.link)],
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_task:{next_task.id}")]
                                                    ])
                await callback_query.message.edit_text(task_text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await callback_query.message.edit_text(
                "üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!",
                parse_mode="HTML"
            )

    except TelegramBadRequest as e:
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        if "chat not found" in str(e):
            error_message += " –ö–æ–¥ –æ—à–∏–±–∫–∏: 1(–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)"
        else:
            error_message += " –ö–æ–¥ –æ—à–∏–±–∫–∏: 2"
        await callback_query.answer(error_message, show_alert=True)

async def handle_subscription_check(bot: Bot, callback_query: types.CallbackQuery, chanel, user_id: int, task_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."""
    member = await bot.get_chat_member(chat_id=chanel.chanel_id, user_id=user_id)
    if member.status in ["member", "administrator", "creator"]:
        await mark_task_completed(user_id, task_id)
        await decrease_channel_limit(chanel.id)
        await add_reward_to_user(user_id, chanel.reward)
        await callback_query.answer("üéâ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞. –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —É –≤–∞—Å", show_alert=True)
    else:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)


async def handle_join_request_check(bot: Bot, callback_query: types.CallbackQuery, chanel, user_id: int, task_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª."""
    member = await bot.get_chat_member(chat_id=chanel.chanel_id, user_id=user_id)
    if member.status in ["member"]:
        await callback_query.answer("‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –û—Ç–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
    elif member.status in [ "administrator", "creator"]:
        await mark_task_completed(user_id, task_id)
        await decrease_channel_limit(chanel.id)
        await add_reward_to_user(user_id, chanel.reward)
        await callback_query.answer("üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞. –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —É –≤–∞—Å", show_alert=True)
    elif chanel.chanel_id in join_requests_cache and user_id in join_requests_cache[chanel.chanel_id]:
        await mark_task_completed(user_id, task_id)
        await decrease_channel_limit(chanel.id)
        await add_reward_to_user(user_id, chanel.reward)
        await callback_query.answer("üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞. –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —É –≤–∞—Å", show_alert=True)
    else:
        await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
